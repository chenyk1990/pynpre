/* This file is automatically generated. DO NOT EDIT! */

// #include "kiss_fft.h"
// #include "npre_dtype.h"

#ifndef KISS_FFT_H
#include "npre_kissfft.h"
#endif

#include "npre_dtype.h"

#define crealf  np_crealf
#define creal   np_creal
#define cimagf  np_cimagf
#define cimag   np_cimag
#define conjf   np_conjf
#define cabsf   np_cabsf
#define cabs    np_cabsd
#define cargf   np_cargf
#define carg    np_carg
#define ccosf   np_ccosf
#define csinf   np_csinf
#define ctanf   np_ctanf
#define cacosf  np_cacosf
#define casinf  np_casinf
#define catanf  np_catanf
#define ccoshf  np_ccoshf
#define csinhf  np_csinhf
#define ctanhf  np_ctanhf
#define cacoshf np_cacoshf
#define casinhf np_casinhf
#define catanhf np_catanhf
#define cexpf   np_cexpf
#define clogf   np_clogf
#define csqrtf  np_csqrtf
#define cpowf   np_cpowf


kiss_fft_cpx np_cmplx(float re, float im);

double np_creal(np_double_complex c);
/*< real part >*/


double np_cimag(np_double_complex c);
/*< imaginary part >*/


np_double_complex np_dcneg(np_double_complex a);
/*< unary minus >*/


np_double_complex np_dcadd(np_double_complex a, np_double_complex b);
/*< complex addition >*/


np_double_complex np_dcsub(np_double_complex a, np_double_complex b);
/*< complex subtraction >*/


np_double_complex np_dcmul(np_double_complex a, np_double_complex b);
/*< complex multiplication >*/


kiss_fft_cpx np_dccmul(np_double_complex a, kiss_fft_cpx b);
/*< complex multiplication >*/


np_double_complex np_dcdmul(np_double_complex a, kiss_fft_cpx b);
/*< complex multiplication >*/


np_double_complex np_dcrmul(np_double_complex a, double b);
/*< complex by real multiplication >*/


np_double_complex np_dcdiv(np_double_complex a, np_double_complex b);
/*< complex division >*/


double np_carg(np_double_complex z);
/*< replacement for cargf >*/


double np_cabsd(np_double_complex z);
/*< replacement for cabs >*/

float np_cabs(np_complex c);
/*< complex absolute value >*/


float np_crealf(kiss_fft_cpx c);
/*< real part >*/

float np_cimagf(kiss_fft_cpx c);
/*< imaginary part >*/


void cprint (np_complex c);
/*< print a complex number (for debugging purposes) >*/


kiss_fft_cpx np_cadd(kiss_fft_cpx a, kiss_fft_cpx b);
/*< complex addition >*/


kiss_fft_cpx np_csub(kiss_fft_cpx a, kiss_fft_cpx b);
/*< complex subtraction >*/


kiss_fft_cpx np_csqrtf (kiss_fft_cpx c);
/*< complex square root >*/


kiss_fft_cpx np_cdiv(kiss_fft_cpx a, kiss_fft_cpx b);
/*< complex division >*/


kiss_fft_cpx np_cmul(kiss_fft_cpx a, kiss_fft_cpx b);
/*< complex multiplication >*/


kiss_fft_cpx np_crmul(kiss_fft_cpx a, float b);
/*< complex by real multiplication >*/


kiss_fft_cpx np_cneg(kiss_fft_cpx a);
/*< unary minus >*/


kiss_fft_cpx np_conjf(kiss_fft_cpx z);
/*< complex conjugate >*/


float np_cabsf(kiss_fft_cpx z);
/*< replacement for cabsf >*/


float np_cargf(kiss_fft_cpx z);
/*< replacement for cargf >*/


kiss_fft_cpx np_ctanhf(kiss_fft_cpx z);
/*< complex hyperbolic tangent >*/


kiss_fft_cpx np_ccosf(kiss_fft_cpx z);
/*< complex cosine >*/


kiss_fft_cpx np_ccoshf(kiss_fft_cpx z);
/*< complex hyperbolic cosine >*/


kiss_fft_cpx np_csinf(kiss_fft_cpx z);
/*< complex sine >*/


kiss_fft_cpx np_csinhf(kiss_fft_cpx z);
/*< complex hyperbolic sine >*/


kiss_fft_cpx np_clogf(kiss_fft_cpx z);
/*< complex natural logarithm >*/


kiss_fft_cpx np_cexpf(kiss_fft_cpx z);
/*< complex exponential >*/


kiss_fft_cpx np_ctanf(kiss_fft_cpx z);
/*< complex tangent >*/


kiss_fft_cpx np_casinf(kiss_fft_cpx z);
/*< complex hyperbolic arcsine >*/


kiss_fft_cpx np_cacosf(kiss_fft_cpx z);
/*< complex hyperbolic arccosine >*/


kiss_fft_cpx np_catanf(kiss_fft_cpx z);
/*< complex arctangent >*/


kiss_fft_cpx np_catanhf(kiss_fft_cpx z);
/*< complex hyperbolic arctangent >*/


kiss_fft_cpx np_casinhf(kiss_fft_cpx z);
/*< complex hyperbolic sine >*/


kiss_fft_cpx np_cacoshf(kiss_fft_cpx z);
/*< complex hyperbolic cosine >*/


kiss_fft_cpx np_cpowf(kiss_fft_cpx a, kiss_fft_cpx b);
/*< complex power >*/

